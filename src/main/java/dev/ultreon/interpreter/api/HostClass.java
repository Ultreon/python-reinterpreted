package dev.ultreon.interpreter.api;

import dev.ultreon.interpreter.api.context.Context;
import dev.ultreon.interpreter.api.obj.FuncType;
import dev.ultreon.interpreter.api.obj.Invokable;
import dev.ultreon.interpreter.api.obj.ScriptObject;
import dev.ultreon.interpreter.api.symbols.Type;
import dev.ultreon.interpreter.api.symbols.Value;
import dev.ultreon.interpreter.api.InterpInitializerList;
import dev.ultreon.interpreter.python3.InterpreterNoAttrException;
import dev.ultreon.interpreter.python3.PythonValue;
import org.jetbrains.annotations.NotNull;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class HostClass extends HostObject implements ClassLike, Invokable {
    private final Class<?> theClass;

    public HostClass(@NotNull Context context, Class<?> theClass) {
        super(context, theClass);
        this.theClass = theClass;

        thisContext = new HostedClassContext(theClass, context);
    }

    public ClassLike asClass() {
        return this;
    }

    @Override
    public Value get(String name) {
        if (name.equals("__java_class__")) return PythonValue.of(thisContext, new HostObject(thisContext, theClass));
        if (name.equals("__name__")) return PythonValue.of(thisContext, theClass.getSimpleName());
        if (name.equals("__module__")) return PythonValue.of(thisContext, theClass.getPackage().getName());
        if (name.equals("__qualname__")) return PythonValue.of(thisContext, theClass.getName());
        if (name.equals("__doc__")) return PythonValue.of(thisContext, """
                This is the class object for %s.
                Generated by the interpreter.
                
                Java spec: %s
                """.formatted(theClass.getSimpleName(), theClass.toGenericString()));

        try {
            for (Class<?> c = (Class<?>) host; c != Object.class; c = c.getSuperclass()) {
                for (Field field : c.getDeclaredFields()) {
                    if (field.getName().equals(name)) {
                        return Value.of(thisContext, field.get(host));
                    }
                }

                List<Method> methods = new ArrayList<>();
                for (Method method : c.getDeclaredMethods()) {
                    if (method.getName().equals(name)) {
                        methods.add(method);
                    }
                }
                return Value.of(thisContext, new FuncType(c, methods.toArray(new Method[0]), null, thisContext));
            }
        } catch (Exception e) {
            throw new InterpreterException("Could not find member " + name);
        }

        throw new InterpreterNoAttrException("Member " + name + " not found.");
    }

    public Value set(String name, Value value) {
        try {
            for (Class<?> c = (Class<?>) host; c != Object.class; c = c.getSuperclass()) {
                for (Field field : c.getDeclaredFields()) {
                    if (field.getName().equals(name)) {
                        field.set(host, value);
                        return value;
                    }
                }

                for (Method method : c.getDeclaredMethods()) {
                    if (method.getName().equals(name)) {
                        throw new InterpreterException("Cannot set method " + name + " in host object.");
                    }
                }
            }
        } catch (Exception e) {
            throw new InterpreterException("Could not find method " + name);
        }

        throw new InterpreterNoAttrException("Member " + name + " not found.");
    }

    @Override
    public String name() {
        return ((Class<?>) host).getName();
    }

    @Override
    public Value cast(Value value) {
        if (asType().isInstance(value)) {
            return value;
        }
        throw new InterpreterTypeException("Cannot cast " + value + " to " + this);
    }

    @Override
    public ObjectLike construct() {
        return new HostObject(thisContext, (Class<?>) host, true);
    }

    @Override
    public boolean isInstance(ObjectLike scriptObject) {
        if (scriptObject instanceof HostObject hostObject) {
            return ((Class<?>) host).isInstance(hostObject.getHost());
        } else if (scriptObject instanceof ScriptObject scriptObject1) {
            List<ClassLike> parents = scriptObject1.parents();
            for (ClassLike parent : parents) {
                if (parent instanceof HostClass hostClass) {
                    return ((Class<?>) host).isInstance(hostClass.getHost());
                }
            }
            return false;
        }

        return false;
    }

    @Override
    public Type asType() {
        return Type.class_(this);
    }

    @Override
    public List<ClassLike> parents() {
        List<ClassLike> parents = new ArrayList<>();
        for (Class<?> c = theClass; c != Object.class; c = c.getSuperclass()) {
            parents.add(new HostClass(thisContext, c));

            for (Class<?> i : c.getInterfaces()) {
                HostClass e = new HostClass(thisContext, i);
                parents.add(e);
                parents.addAll(e.parents());
            }
        }

        return parents;
    }

    @Override
    public Context createInvokeContents() {
        return new HostedClassContext(theClass, thisContext);
    }

    @Override
    public @NotNull Context context() {
        return thisContext;
    }

    @Override
    public String toString() {
        return "<host class " + name() + " at " + System.identityHashCode(this) + ">";
    }

    @Override
    public Value invoke(Context context, Map<String, Value> kwargs, Value[] args) {
        ObjectLike construct = construct();
        construct.initialize(new InterpInitializerList(kwargs, args, null), members -> { });
        return Value.of(context, construct);
    }
}
